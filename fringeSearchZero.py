#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Given a collection of .npz files search for course delays and rates.

$Rev$
$LastChangedBy$
$LastChangedDate$
"""

import os
import sys
import glob
import numpy
import getopt
import tempfile

from datetime import datetime

from lsl.statistics import robust
from lsl.misc.mathutil import to_dB

from utils import readCorrelatorConfiguration

from matplotlib import pyplot as plt
def usage(exitCode=None):
	print """fringeSearchZero.py - Given a collection of .npz files generated by "the next 
generation of correlator", search for fringes.

Usage:
fringeSearchZero.py [OPTIONS] npz [npz [...]]

Options:
-h, --help                  Display this help information
-d, --decimate              Frequency decimation factor (default = 1)
-l, --limit                 Limit the data loaded to the first N files
                            (default = -1 = load all)
-y, --y-only                Limit the search on VLA-LWA baselines to the VLA
                            Y pol. only
"""
	
	if exitCode is not None:
		sys.exit(exitCode)
	else:
		return True


def parseConfig(args):
	config = {}
	# Command line flags - default values
	config['freqDecimation'] = 1
	config['lastFile'] = -1
	config['yOnlyVLALWA'] = False
	config['args'] = []
	
	# Read in and process the command line flags
	try:
		opts, args = getopt.getopt(args, "hd:l:y", ["help", "decimate=", "limit=", "y-only"])
	except getopt.GetoptError, err:
		# Print help information and exit:
		print str(err) # will print something like "option -a not recognized"
		usage(exitCode=2)
		
	# Work through opts
	for opt, value in opts:
		if opt in ('-h', '--help'):
			usage(exitCode=0)
		elif opt in ('-d', '--decimate'):
			config['freqDecimation'] = int(value, 10)
		elif opt in ('-l', '--limit'):
			config['lastFile'] = int(value, 10)
		elif opt in ('-y', '--y-only'):
			config['yOnlyVLALWA'] = True
		else:
			assert False
			
	# Add in arguments
	config['args'] = args
	
	# Validate
	if len(config['args']) == 0:
		raise RuntimeError("Must provide at least one .npz file to plot")
	if config['freqDecimation'] <= 0:
		raise RuntimeError("Invalid value for the frequency decimation factor")
	if config['lastFile'] <= 0 and config['lastFile'] != -1:
		raise RuntimeError("Invalid value for the last file to process")
		
	# Return configuration
	return config


def main(args):
	# Parse the command line
	config = parseConfig(args)
	
	filenames = config['args']
	filenames.sort()
	if config['lastFile'] != -1:
		filenames = filenames[:config['lastFile']]
		
	nInt = len(filenames)
	
	dataDict = numpy.load(filenames[0])
	tInt = dataDict['tInt']
	nBL, nChan = dataDict['vis1XX'].shape
	freq = dataDict['freq1']
	
	cConfig = dataDict['config']
	fh, tempConfig = tempfile.mkstemp(suffix='.txt', prefix='config-')
	fh = open(tempConfig, 'w')
	for line in cConfig:
		fh.write('%s\n' % line)
	fh.close()
	refSrc, junk1, junk2, junk3, antennas = readCorrelatorConfiguration(tempConfig)
	os.unlink(tempConfig)
	
	dataDict.close()
	
	bls = []
	l = 0
	cross = []
	for i in xrange(0, len(antennas), 2):
		ant1 = antennas[i].stand.id
		for j in xrange(i, len(antennas), 2):
			ant2 = antennas[j].stand.id
			if ant1 != ant2:
				bls.append( (ant1,ant2) )
				cross.append( l )
			l += 1
	nBL = len(cross)
	
	if config['freqDecimation'] > 1:
		if nChan % config['freqDecimation'] != 0:
			raise RuntimeError("Invalid freqeunce decimation factor:  %i %% %i = %i" % (nChan, config['freqDecimation'], nChan%config['freqDecimation']))

		nChan /= config['freqDecimation']
		freq.shape = (freq.size/config['freqDecimation'], config['freqDecimation'])
		freq = freq.mean(axis=1)
		
	times = numpy.zeros(nInt, dtype=numpy.float64)
	visXX = numpy.zeros((nInt,nBL,nChan), dtype=numpy.complex64)
	if not config['yOnlyVLALWA']:
		visXY = numpy.zeros((nInt,nBL,nChan), dtype=numpy.complex64)
	visYX = numpy.zeros((nInt,nBL,nChan), dtype=numpy.complex64)
	visYY = numpy.zeros((nInt,nBL,nChan), dtype=numpy.complex64)

	for i,filename in enumerate(filenames):
		dataDict = numpy.load(filename)

		tStart = dataDict['tStart']
		
		cvisXX = dataDict['vis1XX'][cross,:]
		cvisXY = dataDict['vis1XY'][cross,:]
		cvisYX = dataDict['vis1YX'][cross,:]
		cvisYY = dataDict['vis1YY'][cross,:]
		
		if config['freqDecimation'] > 1:
			cvisXX.shape = (cvisXX.shape[0], cvisXX.shape[1]/config['freqDecimation'], config['freqDecimation'])
			cvisXX = cvisXX.mean(axis=2)
			cvisXY.shape = (cvisXY.shape[0], cvisXY.shape[1]/config['freqDecimation'], config['freqDecimation'])
			cvisXY = cvisXY.mean(axis=2)
			cvisYX.shape = (cvisYX.shape[0], cvisYX.shape[1]/config['freqDecimation'], config['freqDecimation'])
			cvisYX = cvisYX.mean(axis=2)
			cvisYY.shape = (cvisYY.shape[0], cvisYY.shape[1]/config['freqDecimation'], config['freqDecimation'])
			cvisYY = cvisYY.mean(axis=2)
			
		visXX[i,:,:] = cvisXX
		if not config['yOnlyVLALWA']:		
			visXY[i,:,:] = cvisXY
		visYX[i,:,:] = cvisYX
		visYY[i,:,:] = cvisYY	

		times[i] = tStart
		
		dataDict.close()
			
	print "Got %i files from %s to %s (%.1f s)" % (len(filenames), datetime.utcfromtimestamp(times[0]).strftime("%Y/%m/%d %H:%M:%S"), datetime.utcfromtimestamp(times[-1]).strftime("%Y/%m/%d %H:%M:%S"), (times[-1]-times[0]))

	iTimes = numpy.zeros(nInt-1, dtype=times.dtype)
	for i in xrange(1, len(times)):
		iTimes[i-1] = times[i] - times[i-1]
	print " -> Interval: %.3f +/- %.3f seconds (%.3f to %.3f seconds)" % (iTimes.mean(), iTimes.std(), iTimes.min(), iTimes.max())
	
	print "Number of frequency channels: %i (~%.1f Hz/channel)" % (len(freq), freq[1]-freq[0])

	dTimes = times - times[0]
	
	dMax = 1.0/(freq[1]-freq[0])/4
	dMax = int(dMax*1e6)*1e-6
	rMax = 1.0/iTimes.mean()/4
	rMax = int(rMax*1e2)*1e-2
	print "Searching delays +/- %.1f us" % (dMax*1e6,)
	print "           rates +/- %.1f mHz" % (rMax*1e3,)
	print " "
	
	delay = numpy.linspace(-dMax, dMax, 2*int(dMax*1e6)+1)		# s
	drate = numpy.linspace(-rMax, rMax, 2*int(rMax*1e2)+1)		# Hz
	
	good = numpy.where( (freq>72e6) & ((freq<77.26e6) | (freq>77.3e6)) & ((freq<76.3e6) | (freq>76.32e6)) & ((freq<76.82e6) | (freq>76.83e6)) & ((freq<78.8e6) | (freq>76.86e6)) & ((freq<79.85e6) | (freq>79.90e6)) )[0]
	
	import pylab
	dirName = os.path.basename( os.path.dirname(filenames[0]) )
	print "%3s  %9s  %2s  %6s  %8s  %10s" % ('#', 'BL', 'Pl', 'S/N', 'Delay', 'Rate')
	for b in xrange(len(bls)):
		if bls[b][1] not in (51, 52):
			if bls[b][0] != bls[0][0]:
				continue
			polToUse = ('XX', 'YY')
			visToUse = (visXX, visYY)
		else:
			if config['yOnlyVLALWA']:
				polToUse = ('YX', 'YY')
				visToUse = (visYX, visYY)
			else:
				polToUse = ('XX', 'XY', 'YX', 'YY')
				visToUse = (visXX, visXY, visYX, visYY)
				
		pylab.figure()
		for pol,vis in zip(polToUse, visToUse):
			amp = numpy.zeros((delay.size,drate.size))
			
			bv = 1e6
			for i,d in enumerate(delay):
				subData = vis[:,b,:]*1.0
				subData *= numpy.exp(-2j*numpy.pi*freq*d)
				subData = numpy.mean(subData[:,good], axis=1)
				
				for j,r in enumerate(drate):
					subAmp = subData * numpy.exp(-2j*numpy.pi*dTimes*r)
					amp[i,j] = numpy.abs( subAmp.mean() )
					
			best = numpy.where( amp == amp.max() )
			if amp.max() > 0:
				bsnr = (amp[best]-amp.mean())[0]/amp.std()
				bdly = delay[best[0][0]]*1e6
				brat = drate[best[1][0]]*1e3
				print "%3i  %9s  %2s  %6.2f  %5.1f us  %6.1f mHz" % (b, bls[b], pol, bsnr, bdly, brat)
			else:
				print "%3i  %9s  %2s  %6s  %8s  %10s" % (b, bls[b], pol, '----', '----', '----')
				
			if pol == 'XX':
				pylab.subplot(2, 2, 1)
			elif pol == 'XY':
				pylab.subplot(2, 2, 3)
			elif pol == 'YX':
				pylab.subplot(2, 2, 4)
			else:
				pylab.subplot(2, 2, 2)
			pylab.imshow(amp, origin='lower', interpolation='nearest', 
						extent=(drate[0]*1e3, drate[-1]*1e3, delay[0]*1e6, delay[-1]*1e6), 
						cmap='gray_r')
			pylab.plot(drate[best[1][0]]*1e3, delay[best[0][0]]*1e6, linestyle='', marker='x', color='r', ms=15, alpha=0.75)
			pylab.axis('auto')
			pylab.title(pol)
			pylab.xlabel('Rate [mHz]')
			pylab.ylabel('Delay [$\\mu$s]')
			pylab.suptitle("%i,%i" % bls[b])
			
		pylab.suptitle(dirName)
		pylab.draw()
	#pylab.show()


if __name__ == "__main__":
	main(sys.argv[1:])

