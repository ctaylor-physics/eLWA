#!/usr/bin/env python

from __future__ import print_function

"""
Script that takes a directory containing .npz files generated by superCorrelator.py
and cleans up any integrations that do not appear to have a full set.

$Rev$
$LastChangedBy$
$LastChangedDate$
"""

import os
import sys
import glob
import getopt


def usage(exitCode=None):
    print("""pruneIntegrationSets.py - Script that takes in a directory and removes integrations 
where a full set is not present.  If no directory is supplied, the current 
directory is used.

Usage:
pruneIntegrationSets.py [OPTIONS] [directory]

Options:
-h, --help                Display this help information
-q, --quiet               Suppress script output
""")
    
    if exitCode is not None:
        sys.exit(exitCode)
    else:
        return True


def parseConfig(args):
    config = {}
    # Command line flags - default values
    config['verbose'] = True
    config['args'] = []
    
    # Read in and process the command line flags
    try:
        opts, args = getopt.getopt(args, "hq", ["help", "quiet"])
    except getopt.GetoptError, err:
        # Print help information and exit:
        print(str(err)) # will print something like "option -a not recognized"
        usage(exitCode=2)
        
    # Work through opts
    for opt, value in opts:
        if opt in ('-h', '--help'):
            usage(exitCode=0)
        elif opt in ('-q', '--quiet'):
            config['verbose'] = False
        else:
            assert False
            
    # Add in arguments
    config['args'] = args
    
    # Return configuration
    return config


def main(args):
    # Parse the command line
    config = parseConfig(args)
    try:
        basedir = config['args'][0]
    except IndexError:
        basedir = '.'
        
    # Validate
    basedir = os.path.abspath(basedir)
    if not os.path.exists(basedir):
        raise RuntimeError("'%s' does not exists" % basedir)
    if not os.path.isdir(basedir):
        raise RuntimeError("'%s' is not a directory" % basedir)
        
    # Find all of the files
    filenames = glob.glob(os.path.join(basedir, '*-vis2-*.npz'))
    
    # Validate
    if len(filenames) == 0:
        if config['verbose']:
            print("No integrations found in '%s', exiting" % basedir)
        sys.exit()
        
    # Find the scan/integration sets
    scans = {}
    for filename in filenames:
        basename = os.path.basename(filename)
        name, _, nint = basename.split('-', 2)
        type, scan, side = name[:-4], name[-4:-1], name[-1]
        nint = nint.split('.', 1)[0]
        
        if scan not in scans:
            scans[scan] = {}
        if nint not in scans[scan]:
            scans[scan][nint] = []
        scans[scan][nint].append( (type, side) )
        
    # Find out what a "typical" integration set looks like
    nInts = []
    for scan in scans:
        nInts.extend( [len(scans[scan][nint]) for nint in scans[scan]] )
    nInts = max(nInts)
    if config['verbose']:
        print("There appear to be %i files per integration set" % nInts)
        
    # Find bad integration sets that do not have the right number parts
    bad = []
    for scan in scans:
        for nint in scans[scan]:
            if len(scans[scan][nint]) != nInts:
                bad.append( (scan, nint) )
                
    # Move any integration sets that do not ahve the right number of parts
    # into a 'notUsed' directory.
    if bad:
        ## Make sure we have a 'notUsed' directory to populate
        if not os.path.exists(os.path.join(basedir, 'notUsed')):
            os.mkdir(os.path.join(basedir, 'notUsed'))
            
        ## Move the files over
        nMoved = 0
        for scan,nint in bad:
            filenames = glob.glob(os.path.join(basedir, '*%s[HL]-vis2-%s.npz' % (scan, nint)))
            for filename in filenames:
                os.rename(filename, os.path.join(basedir, 'notUsed', os.path.basename(filename)))
                nMoved += 1
                
        ## Report
        if config['verbose']:
            badScans = set([scan for scan,nint in bad])
            
            print("Moved %i files corresponding to %i integrations to 'notUsed'" % (nMoved, len(bad)))
            print("Trimmed Scans:")
            for scan in badScans:
                print("  %s" % scan)


if __name__ == "__main__":
    main(sys.argv[1:])
    